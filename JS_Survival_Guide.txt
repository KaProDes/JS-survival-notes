--1--
Brief installation and how to use

--2--
console
  - .time and .timeEnd -> to check execution time of program
  - .log
  - .error
  - .warn
  - .info
  - .table -> for JSON objects table print
  - .assert(condition,statement_if_condition_fails)

comments
  - single and multiline

--3--
var
  - usage, mutability and global scope
const
  - usage, partial-mutability and block level scoped
  - arrays that are const support push, pop but no redeclaration
  - objects declared as const allow their attriibutes to change but prevent redeclaration
  - You have to declare AND assign immediately
let
  - usage, multability and block level scoped

*Avoid using $foo (Jquery like) and _foo (private member like) for ordinary variables

Cases
  - camelCase
  - PascalCase
  - snake_case
  - kebab-case

--4--
Primitive Datatypes
- number, string, symbol, null, undefined
- stored on stack

Reference Data Types
- arrays, objects, functions, Dates
- stored in heap

typeof operator to check datatypes (try for all datatypes)

datatype | typeof
number number
string string
symbol symbol
null object
undefined undefined
array  object
object object
date object
function function

Symbols are freaking weird amirite?

--5--
Type conversion (like typecasting)
- Number() String() Date() are type converters
- number to string, date to string, array to string
- .toString() also helps with string conversion

- Similarly, Number() converts any datatype to number
- If conversion is not possible we will get NaN
- true and false to Number() will give 1 and 0 respectively
- array to number will also give NaN
- parseInt(), parseFloat() are used to get Int and Float values respectively
- .toFixed(x) will fix the decimal points up to x decimal places after .

Type coersion (like auto typecasting)
- "698" + 34 gives "69834"
- Number("698") + 34 gives 732

--6--
Strings
- str.concat(str1)
- str.length
- str.toLowerCase()
- str.toUpperCase()
- str[index]
- str.indexOf('xyz')
- str.lastIndexOf('xyz')
- str.charAt(index)
- str.endsWith('xyz')
- str.includes('xyz')
- str.substring(startIndex, endIndex+1)
- str.slice(-x) -> last x chars
- str.slice(0,4) -> first 3 chars
- str.split(' ')
- str.replace('xyz','abc')

Template Literals
- Their ease of use
- Making multiline Literals


--7--
Arrays
- arr.length property
- using Array() constructor to create an array
- Array.isArray(arr) to check if array
- arr.indexOf(element)

- Most array operations are inplace

- arr.push(x)
- arr.pop()
- arr.unshift(x)
- arr.shift()
- arr.splice(start,end+1)
- arr.reverse()
- arr.concat(arr2)
- Array.from(a) -> converts a collection to an iterable array

- Array operations which are inplace and do not require reassignment will work on const type arrays perfectly fine

Objects
- Defining objects' keys and values
- Accessing values using keys using the obj.propname operator and obj['propname'] notation

--8--

- if else if else in JS
- == vs ===
- null and undefined as falsey
- assigned values as truthy

- ternery operator

- switch statement structure in JS + break

--9--

- for while and do-while loops
- break pass and continue
- for each loop over arrays (element, index, array) as args
- for key in obj to iterate over objects

--10--
Functions
- traditional functions in JS
- args and return type
- arrow functions in JS
- packing functions withing an object

Scopes
- global and block level(function scope) using var, let
- var has a global scope while let, const has a block level scope
- Investigate more on this - try some examples and MCQs

--11--
DOM
- window
  - window is treated a global object. So window.alert() is same as alert()
  - alert()
  - prompt()
  - confirm()
  - window.document or document
  - window.innerHeight or innerHeight
  - window.innerWidth or innerWidth
  - window.scrollX and window.scrollY
  - window.location or location used to reload page and change href of the page
    - location.reload()
    - location.href 
    - location.href = 'https://foobar.com'
    - location.toString()
  - window.history or history holds the entire history
    - history.go(1) -> goes 1 step back in history (back button)

--12--
document
- document.all -> all tags as html collection (not an array)
- document.body -> body of the document
- document.forms -> all forms present in the doc
- document.links -> all links present in the doc
- NOTE : If we get html collection, we can convert them to an array by using Array.from(collection_name)
- document.images -> all images present in the doc
- document.scripts -> all scripts present in the doc

--13--
Exercise 1
Given that you have opened the console on a webpage
Write a script that will print all links which contain the word 'python'

--14--
Selectors
- single element selectors
- getElementById()
- querySelector() #id and .class

Multi element selectors
- getElementsByClassName()
- querySelectorAll() #id and .class
- getElementsByTagName()

Traversals and Properties
- element.className
- element.parentNode
- element.childNodes
- element.style.color and other such CSS properties 
- element.innerText and element.innerHTML
- iterate and changing properties using selectors and array.forEach

--15--
Child, Parent and Travesing DOM
- element.childNodes vs element.children
- nodeName and nodeType
- nodeTypes - Element, attribute, textNode, Comment, Document and docType
- element.firstChild and element.firstElementChild
- element.lastChild and element.lastElementChild
- childElementCount vs childNodes.length
- element.parentNode
- element.nextElementSibling vs element.nextSibling

--16--
Create, Remove and Replace elements
- document.createElement('htmlTagName')
- element.className = 'foo'
- element.id = 'foo'
- document.createTextNode('lorem text')
- element.appendChild(element1)

- element.replaceWith(element1)
- element.replaceChild(newElement, oldElement)
- element.removeChild(childElement)

- element.getAttribute('attributeName')
- element.hasAttribute('attributeName')
- element.setAttribute('attributeName','attributeValue')
- element.removeAttribute('attributeName')

- Quick quiz at the very end

--17--
Event and Event Object
- element.addEventListener(event,callbackFunction(e)=>{...})
- e parameter represents the event object
- e.target
- e.target.className
- Array.from(e.target.classList)
- e.target.id
- e.target.value
- e.offsetX
- e.offsetY
- e.clientX
- e.clientY

--18--
- e.preventDefault()
- click
- dblclick
- mousedown
- mouseup
- mousemove
- mouseleave
- mousenter
- tracking movement of offsetX and offsetY of mouse and setting RGB colors of div

--19--
Solutions to exercise 1 mentioned in section --13--

--20--
Local and Session Storage
- local storage stays persistent until browser is reset/updated/cleared
- session storage stays persistent until the browser task is active

- items are stored as key-value pairs in localStorage

- window.localStorage to see the entire local storage key-values
- localStorage.setItem('keyName','valValue')
- localStorage.getItem('keyName') or localStorage['keyName'] or localStorage.keyName
- localStorage.removeItem('keyName') to nuke an item
- localStorage.clear() to nuke the entire localStorage

- By default arrays cannot be stored in localStorage, but we can use a workaround
  - However we can perform stringArr = JSON.stringify(arr) to convert array to string and then store stringArr
  - While retriving the stringified array, perform arr = JSON.parse(stringArr) and get back arr

- Every website has its own localStorage independent from others

- sessionStorage has the same functions/getters/setters as localStorage, 
- the only difference is the persistence that local storage provides over session storage
- once we quit the browser, sessionStorage is https://www.youtube.com/watch?v=xc0LQveanOk

--21--
Editable Div : Exercise 2
Quite a quick, but fun and insightful exercise :)

--22--
Magic Notes App
Features
- Add a note by writing text and pressing Add Note Button. This will add your note text to localStorage notes array and run render logic
- Delete a note by clicking delete button. Delete is handled by id which is nothing but the index of the note in notes array passed down by render logic
- Render logic fetches notes from localStorage and produces card html using template literals and injects the html in the DOM
- Search sets the display to block if note text includes a substring otherwise it sets it to none

--23--
Math object in JS
- console.log(Math) to see all available Functions
- Math.PI and Math.E for constants
- Math.round() Math.ceil() Math.floor()
- Math.abs()
- Math.sqrt() Math.pow()
- Math.min() Math.max()
- Math.random() gives random between 0 and 1 which can be offsetted, scaled and integerized using floor

- There are many more functions in Math, please explore

--24--
Date(s) in JS
- new Date() gives current date-time
- new Date('8-4-2003 04:54:08') and new Date('June 13 1976') and new Date('09/16/1976') are ways to create a date
- date.getDate() -> day
- date.getMonth() -> month
- date.getFullYear() -> fullyear
- date.getTime() -> Time since 1st Jan 1970
- date.getMilliseconds()
- date.getHours() / getMinutes() / getSeconds()
- date.setDate(x) / date.setMonth(y) / date.setFullYear(z)
- date.setHours(x) / date.setMinutes(y) / date.setSeconds(z)

--25--
Solution to Exercise 2
- node.appendChild(x)
- node.prependChild(x)
- node.insertBefore(x)
- node.insertAfter(x)
- 'click' and 'blur' events

--26--
Exercise 3
- Add a title field as well in the magic notes app
- easy (store notes as a JS array of objects in localStorage)

--27--
OOP
- Object Literals (Non OOP stuff, kinda)
- Functional Constructor and use of this keyword
- new keyword while instantiating a new object with a Functional constructor
- Why even bother with constructors (and OOP) - maintainability angle


--28--
Object Prototype
- __proto__ is the baseline "class" from which a particular object is created
- if we define our own constructor Obj(...){} and create a new obj using Obj then
  obj uses __proto__ Obj and Obj itself uses the __proto__ Object which is present in JS engine
- The above concept is called prototype chaining 
- Once a constructor, say MyObj is defined for a class, its own __proto__ comes into existence
  We can modify the constructor MyObj by writing MyObj.prototype.someAttribute = ...
- [WARN] : You can modify JS engine classes like Object and String by writing Object.prototype.someNewAttribute = ...
  This is highly unadvisable and must not be done at all. Instead, inherit into a new class and modify the new class (prototype chaining)
- Please look into [classical inheritance vs prototypal inheritance in javascript]

--29--
Solution to the Improvement Exercise of the Magic Notes Project
- Simply create an additional form field and implement an array of objects to store (title,desc) type object in localStorage
- Use JSON stringify and parse to convert to and from localStorage storable array string

--30--
Prototypal Inheritance
- Older way of doing things
- Good to know but not terribly important now since the advent of ES6 classes (--31--)
- Very quirky and tricky to navigate this type of inheritance.
- Please see : https://codewithharry.com/videos/javascript-tutorials-in-hindi-30/

--31--
ES6 JS classes
- class definition and constructor which uses this keyword
- attributes and method definition in the context of a class
- instatiating an object of a class
- static methods in a class and how to call them without creating an object
- Inheritance using extends keyword and the user of super() keyword

--32--
